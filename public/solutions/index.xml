<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Solutions on Mohit Kanwar&#39;s App : My Cents</title>
    <link>http://localhost:1313/solutions/</link>
    <description>Recent content in Solutions on Mohit Kanwar&#39;s App : My Cents</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jan 2024 22:53:58 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/solutions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Self Hosted Captcha</title>
      <link>http://localhost:1313/solutions/self-hosted-captcha/self-hosted-captcha/</link>
      <pubDate>Mon, 01 Jan 2024 22:53:58 +0530</pubDate>
      <guid>http://localhost:1313/solutions/self-hosted-captcha/self-hosted-captcha/</guid>
      <description>&lt;h1 id=&#34;objective&#34;&gt;Objective&lt;/h1&gt;&#xA;&lt;p&gt;To design and implement a self-hosted CAPTCHA service that is secure, user-friendly, scalable, and compliant with relevant regulations, ensuring robust protection against automated bots while providing a seamless experience for legitimate users.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Requirements and Scope for a Self-Hosted CAPTCHA Service&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;details style=&#34;margin: 10px&#34;&gt;&#xA;    &lt;summary&gt;&#xA;        &lt;span style=&#34;display:inline;padding: 20px; font-weight: bold&#34;&gt;&#xA;        Functional Requirements&#xA;        &lt;/span&gt;&#xA;    &lt;/summary&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Requirement ID&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FR-001&lt;/td&gt;&#xA;          &lt;td&gt;Support text-based CAPTCHA where users identify distorted text or solve a simple question.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FR-002&lt;/td&gt;&#xA;          &lt;td&gt;Support image-based CAPTCHA where users select specific objects or patterns in images (e.g., “Select all the traffic lights”).&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FR-003&lt;/td&gt;&#xA;          &lt;td&gt;Provide an audio CAPTCHA alternative for visually impaired users.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FR-004&lt;/td&gt;&#xA;          &lt;td&gt;Implement logical CAPTCHA with simple logical or arithmetic puzzles (e.g., “What is 5 + 3?”).&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;/details&gt;&#xA; &lt;details style=&#34;margin: 10px&#34;&gt;&#xA; &lt;summary&gt;&#xA; &lt;span style=&#34;display:inline;padding: 20px; font-weight: bold&#34;&gt;&#xA; User Interaction&#xA; &lt;/span&gt;&#xA; &lt;/summary&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Requirement ID&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FR-005&lt;/td&gt;&#xA;          &lt;td&gt;Provide options for audio CAPTCHAs and high-contrast visual modes to ensure accessibility.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FR-006&lt;/td&gt;&#xA;          &lt;td&gt;Support localization for different languages and regions.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FR-007&lt;/td&gt;&#xA;          &lt;td&gt;Ensure CAPTCHAs are responsive and easy to interact with on mobile devices.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FR-008&lt;/td&gt;&#xA;          &lt;td&gt;Design CAPTCHAs to minimize disruption to the user experience, such as implementing invisible or behavior-based CAPTCHAs for legitimate users.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA; &lt;/details&gt;&#xA;&lt;details style=&#34;margin: 10px&#34;&gt;&#xA;&lt;summary&gt;&#xA;&lt;span style=&#34;display:inline;padding: 20px; font-weight: bold&#34;&gt;&#xA;Security Features&lt;/span&gt;&#xA;&lt;/summary&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Requirement ID&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FR-009&lt;/td&gt;&#xA;          &lt;td&gt;Randomize CAPTCHA challenges to prevent replay attacks and ensure unpredictability.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FR-010&lt;/td&gt;&#xA;          &lt;td&gt;Include mechanisms to identify and block bots based on suspicious activity.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FR-011&lt;/td&gt;&#xA;          &lt;td&gt;Bind CAPTCHA challenges to specific user sessions to prevent reuse.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FR-012&lt;/td&gt;&#xA;          &lt;td&gt;Implement thresholds to limit the frequency of CAPTCHA requests from a single IP address.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;/details&gt;&#xA;&lt;details style=&#34;margin: 10px&#34;&gt;&#xA;&lt;summary&gt;&#xA;&lt;span style=&#34;display:inline;padding: 20px; font-weight: bold&#34;&gt;&#xA;Integration&#xA;&lt;/span&gt;&#xA;&lt;/summary&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Requirement ID&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FR-013&lt;/td&gt;&#xA;          &lt;td&gt;Provide RESTful APIs for easy integration with various platforms and applications.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FR-014&lt;/td&gt;&#xA;          &lt;td&gt;Offer a lightweight JavaScript library for embedding CAPTCHAs on websites.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FR-015&lt;/td&gt;&#xA;          &lt;td&gt;Allow customization of CAPTCHA appearance and difficulty based on application requirements.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;/details&gt;&#xA;&lt;details style=&#34;margin: 10px&#34;&gt;&#xA;&lt;summary&gt;&#xA;&lt;span style=&#34;display:inline;padding: 20px; font-weight: bold&#34;&gt;&#xA;Management and Monitoring&#xA;&lt;/span&gt;&#xA;&lt;/summary&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Requirement ID&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FR-016&lt;/td&gt;&#xA;          &lt;td&gt;Provide an admin dashboard to manage settings, view analytics, and monitor CAPTCHA usage.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;FR-017&lt;/td&gt;&#xA;          &lt;td&gt;Maintain logs of CAPTCHA activity for troubleshooting and security audits.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;/details&gt;&#xA;&lt;details style=&#34;margin: 10px&#34;&gt;&#xA;&lt;summary&gt;&#xA;&lt;span style=&#34;display:inline;padding: 20px; font-weight: bold&#34;&gt;&#xA;Non-Functional Requirements&#xA;&lt;/span&gt;&#xA;&lt;/summary&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Requirement ID&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;NFR-001&lt;/td&gt;&#xA;          &lt;td&gt;Ensure CAPTCHA challenges load within 200ms to minimize user wait times.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;NFR-002&lt;/td&gt;&#xA;          &lt;td&gt;Design the service to handle high traffic volumes without degradation in performance.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;/details&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;context&#34;&gt;&lt;strong&gt;Context&lt;/strong&gt;&lt;/h3&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;img &#xA;    id=&#34;Context-diagram&#34;&#xA;    src=&#34;http://localhost:1313/images/solutions/self-hosted-captcha/c4/1.context-diagram-Context_diagram_for_Captcha_Service.png&#34; &#xA;    alt=&#34;Context Diagram for Captcha solution&#34; &#xA;    title=&#34;Context Diagram for Captcha solution&#34; &#xA;    class=&#34;responsive zoomable&#34; &#xA;    style=&#34;ZgotmplZ&#34; &#xA;    loading=&#34;lazy&#34; &#xA;    width=&#34;600&#34; &#xA;    height=&#34;400&#34; &#xA;    data-light=&#34;http://localhost:1313/images/solutions/self-hosted-captcha/c4/1.context-diagram-Context_diagram_for_Captcha_Service.png&#34;&#xA;    data-dark=&#34;http://localhost:1313/images/solutions/self-hosted-captcha/c4/1.context-diagram-Context_diagram_for_Captcha_Service-dark.png&#34;&gt;&#xA;&#xA;&#xA;&lt;div id=&#34;image-overlay&#34; class=&#34;hidden&#34;&gt;&#xA;    &lt;div id=&#34;overlay-content&#34;&gt;&#xA;        &lt;img id=&#34;overlay-image&#34; src=&#34;&#34;&gt;&#xA;        &lt;button id=&#34;close-overlay&#34;&gt;&amp;times;&lt;/button&gt;&#xA;    &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;script&gt;&#xA;   document.addEventListener(&#39;theme-changed-event&#39;, function (event) {&#xA;       const image = document.getElementById(&#34;Context-diagram&#34;);&#xA;       const selectedTheme = event.detail.theme;&#xA;       image.src = selectedTheme === &#39;dark&#39; ? image.dataset.dark : image.dataset.light;&#xA;   });&#xA;&#xA;   document.addEventListener(&#39;DOMContentLoaded&#39;, function () {&#xA;       const image = document.getElementById(&#34;Context-diagram&#34;);&#xA;       const isDarkMode = document.body.classList.contains(&#34;dark&#34;);&#xA;       image.src = isDarkMode ? image.dataset.dark : image.dataset.light;&#xA;   });&#xA;&#xA;   &#xA;   document.addEventListener(&#39;DOMContentLoaded&#39;, function () {&#xA;       const image = document.getElementById(&#34;Context-diagram&#34;);&#xA;       const overlay = document.getElementById(&#34;image-overlay&#34;);&#xA;       const overlayImage = document.getElementById(&#34;overlay-image&#34;);&#xA;       const closeButton = document.getElementById(&#34;close-overlay&#34;);&#xA;&#xA;       let isDragging = false;&#xA;       let offsetX, offsetY;&#xA;&#xA;       &#xA;       image.addEventListener(&#34;click&#34;, function () {&#xA;           overlayImage.src = image.src;&#xA;           overlay.classList.remove(&#34;hidden&#34;);&#xA;           document.body.style.overflow = &#34;hidden&#34;; &#xA;       });&#xA;&#xA;       &#xA;       overlay.addEventListener(&#34;click&#34;, function (event) {&#xA;           if (event.target === overlay) {&#xA;               closeOverlay();&#xA;           }&#xA;       });&#xA;&#xA;       &#xA;       closeButton.addEventListener(&#34;click&#34;, function () {&#xA;           closeOverlay();&#xA;       });&#xA;&#xA;       &#xA;       document.addEventListener(&#34;keydown&#34;, function (event) {&#xA;           if (event.key === &#34;Escape&#34;) {&#xA;               closeOverlay();&#xA;           }&#xA;       });&#xA;&#xA;       &#xA;       function closeOverlay() {&#xA;           overlay.classList.add(&#34;hidden&#34;);&#xA;           document.body.style.overflow = &#34;auto&#34;; &#xA;       }&#xA;&#xA;       &#xA;       overlayImage.addEventListener(&#34;mousedown&#34;, function (event) {&#xA;           isDragging = true;&#xA;           offsetX = event.clientX - overlayImage.getBoundingClientRect().left;&#xA;           offsetY = event.clientY - overlayImage.getBoundingClientRect().top;&#xA;           overlayImage.style.cursor = &#34;grabbing&#34;;&#xA;           event.preventDefault();&#xA;       });&#xA;&#xA;       document.addEventListener(&#34;mousemove&#34;, function (event) {&#xA;           if (isDragging) {&#xA;               overlayImage.style.position = &#34;absolute&#34;;&#xA;               overlayImage.style.left = (event.clientX - offsetX) + &#34;px&#34;;&#xA;               overlayImage.style.top = (event.clientY - offsetY) + &#34;px&#34;;&#xA;           }&#xA;       });&#xA;&#xA;       document.addEventListener(&#34;mouseup&#34;, function () {&#xA;           isDragging = false;&#xA;           overlayImage.style.cursor = &#34;grab&#34;;&#xA;       });&#xA;   });&#xA;&lt;/script&gt;&#xA;&#xA;&#xA;&lt;style&gt;&#xA;     &#xA;    #image-overlay {&#xA;        position: fixed;&#xA;        top: 0;&#xA;        left: 0;&#xA;        width: 100%;&#xA;        height: 100%;&#xA;        background-color: rgba(0, 0, 0, 0.8);&#xA;        display: flex;&#xA;        justify-content: center;&#xA;        align-items: center;&#xA;        z-index: 9999;&#xA;        opacity: 0;&#xA;        visibility: hidden;&#xA;        transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;&#xA;    }&#xA;&#xA;     &#xA;    #image-overlay:not(.hidden) {&#xA;        opacity: 1;&#xA;        visibility: visible;&#xA;    }&#xA;&#xA;     &#xA;    #overlay-content {&#xA;        position: relative;&#xA;        display: flex;&#xA;        justify-content: center;&#xA;        align-items: center;&#xA;    }&#xA;&#xA;     &#xA;    #overlay-image {&#xA;        max-width: 70% !important;&#xA;        max-height: 70% !important;&#xA;        border-radius: 8px;&#xA;        box-shadow: 0px 4px 10px rgba(255, 255, 255, 0.2);&#xA;        transition: transform 0.2s ease-in-out;&#xA;        cursor: grab;&#xA;        position: relative;&#xA;    }&#xA;&#xA;     &#xA;    #close-overlay {&#xA;        position: absolute;&#xA;        top: 10px;&#xA;        right: 10px;&#xA;        background: rgba(255, 255, 255, 0.9);&#xA;        border: none;&#xA;        font-size: 28px;&#xA;        font-weight: bold;&#xA;        color: black;&#xA;        padding: 5px 12px;&#xA;        cursor: pointer;&#xA;        border-radius: 50%;&#xA;        transition: background 0.3s ease-in-out;&#xA;        display: flex;&#xA;        align-items: center;&#xA;        justify-content: center;&#xA;    }&#xA;&#xA;    #close-overlay:hover {&#xA;        background: rgba(255, 255, 255, 1);&#xA;    }&#xA;&#xA;     &#xA;    #overlay-content {&#xA;        position: relative;&#xA;    }&#xA;&#xA;    #close-overlay {&#xA;        right: -15px;&#xA;        top: -15px;&#xA;        width: 30px;&#xA;        height: 30px;&#xA;        line-height: 20px;&#xA;        text-align: center;&#xA;    }&#xA;&#xA;     &#xA;    .hidden {&#xA;        display: none;&#xA;    }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;p&gt;The captcha system is designed to differentiate the users between the humans and the automated robots.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
